<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>Ian's Database of Cool Movies</title>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js"></script>

</head>
<body>

<div class="container">
    <div id="root"></div>
</div>

<!-- NOTE: script type declaration to support JSX -->
<script type="text/babel">

    // define app container Component
    class MoviesApp extends React.Component {
        constructor(props) {
            // Pass props to parent class
            super(props);
            // Set initial state w/ hard-coded data
            this.state = {
                data: {{{movies}}},
                filter: "", // search term
                curItem: {} // current selected item
            };
            // bind App context to functions for reference in sub components
            this.onSearchChange = this.onSearchChange.bind(this);
            this.onChange = this.onChange.bind(this);
            this.onSave = this.onSave.bind(this);
            this.onDelete = this.onDelete.bind(this);
            this.onClear = this.onClear.bind(this);
        }

        // search handler
        onSearchChange(event) {
            console.log(event);
            // set search term. react will handle component updates
            this.setState({filter: event.target.value.toLowerCase()});
        }

        // show item details
        showDetails(event) {
            // event.target is list item clicked
            let editItem = this.state.data.find((item) => {
                return item._id == event.target.id;
            });
            this.setState({curItem: editItem});
        }

        // clear details form
        onClear() {
            this.setState({curItem: {}});
        }

        // handle detail changes
        onChange(event) {
            var newItem = this.state.curItem;
            newItem[event.target.name] = event.target.value;
            this.setState({curItem: newItem});
        }

        // Handle item save
        onSave() {
            let newItem = this.state.curItem;
            if (!newItem.title) {
                return;
            }
            fetch("/api/add/", {
                method: "POST",
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(newItem)
            }).then(res => res.json())
                    .then((json) => {
                        let newData;
                        if (!newItem._id) { // add new item to array
                            newData = this.state.data;
                            newItem._id = json._id;
                            newData.push(newItem);
                        } else { // update existing item
                            newData = this.state.data.map((item) => {
                                if (item._id === newItem._id) {
                                    item = newItem;
                                }
                                return item;
                            });
                        }

                        // Update state with new array
                        this.setState({data: newData});
                    });
        }

        // Handle item delete
        onDelete() {
            let id = this.state.curItem._id;

            fetch("/api/delete/" + id).then((response) => {
                return response.json();
            }).then((results) => {
                // Filter all items except the one to be removed
                const remainder = this.state.data.filter((item) => {
                    return item._id !== id;
                });
                // Update state with new array
                this.setState({data: remainder});
                this.setState({curItem: {}});
            });
        }

        render() {
            // Render JSX
            return <div>
                <Title title="Ian's Database of Cool Movies"/>
                <SearchForm filter={this.state.filter} change={this.onSearchChange}/>
                <ItemList
                        items={this.state.data}
                        filter={this.state.filter}
                        show={this.showDetails.bind(this)}
                />
                <ItemDetails item={this.state.curItem} change={this.onChange}/>
                <button onClick={this.onSave}>Save</button>
                <button onClick={this.onClear}>Reset</button>
                <button onClick={this.onDelete}>Delete</button>
            </div>;
        }
    }

    // UI elements
    const Title = ({title}) => {
        return (
                <div><h2>{title}</h2></div>
        );
    };
    class SearchForm extends React.Component {
        render() {
            return (
                    <div>
                        <input
                                type="text" placeholder="Enter a search term"
                                value={this.props.filter}
                                onChange={this.props.change}
                        />
                    </div>
            );
        }
    }
    const ItemList = ({items, filter, show}) => {
        // return items that match search entry field, or all items if no entry
        const itemNodes = items.map((item) => {
            if (!filter || item.title.toLowerCase().includes(filter)) {
                return <li id={item._id} key={item._id} onClick={show}>{item.title}</li>
            }
        });
        return <ul>{itemNodes}</ul>;
    };

    class ItemDetails extends React.Component {
        render() {
            return (
                    <div>
                        <h3>Details:</h3>
                        <form onChange={this.props.change}>
                            <input type="text" name="title" placeholder="title" value={this.props.item.title || ""}/>
                            <input type="number" name="year" placeholder="year" value={this.props.item.year || ""}/>
                            <input type="text" name="director" placeholder="director"
                                   value={this.props.item.director || ""}/>
                            <input type="text" name="genre" placeholder="genre" value={this.props.item.genre}/>
                            <p/>
                        </form>
                    </div>
            );
        }
    }

    ReactDOM.render(<MoviesApp />, document.getElementById('root'));
</script>
</body>
</html>
